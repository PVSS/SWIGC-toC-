//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.11
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class KVPNode : IKVPNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal KVPNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(IKVPPINVOKE.KVPNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KVPNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~KVPNode() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          IKVPPINVOKE.delete_KVPNode(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public KVPNode(IKVPNode parent, int _val) : this(IKVPPINVOKE.new_KVPNode__SWIG_0(IKVPNode.getCPtr(parent), _val), true) {
    SwigDirectorConnect();
  }

  public KVPNode(KVPNode other) : this(IKVPPINVOKE.new_KVPNode__SWIG_1(KVPNode.getCPtr(other)), true) {
    if (IKVPPINVOKE.SWIGPendingException.Pending) throw IKVPPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual IKVPNode GetParent() {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("GetParent", swigMethodTypes3) ? IKVPPINVOKE.KVPNode_GetParentSwigExplicitKVPNode(swigCPtr) : IKVPPINVOKE.KVPNode_GetParent(swigCPtr));
    IKVPNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKVPNode(cPtr, false);
    return ret;
  }

  public override IKVPNode GetFirstChild() {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("GetFirstChild", swigMethodTypes0) ? IKVPPINVOKE.KVPNode_GetFirstChildSwigExplicitKVPNode(swigCPtr) : IKVPPINVOKE.KVPNode_GetFirstChild(swigCPtr));
    IKVPNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKVPNode(cPtr, false);
    return ret;
  }

  public override IKVPNode GetNextSibling() {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("GetNextSibling", swigMethodTypes1) ? IKVPPINVOKE.KVPNode_GetNextSiblingSwigExplicitKVPNode(swigCPtr) : IKVPPINVOKE.KVPNode_GetNextSibling(swigCPtr));
    IKVPNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new IKVPNode(cPtr, false);
    return ret;
  }

  public override int GetValue() {
    int ret = (SwigDerivedClassHasMethod("GetValue", swigMethodTypes2) ? IKVPPINVOKE.KVPNode_GetValueSwigExplicitKVPNode(swigCPtr) : IKVPPINVOKE.KVPNode_GetValue(swigCPtr));
    return ret;
  }

  public void SetFirstChild(IKVPNode child) {
    IKVPPINVOKE.KVPNode_SetFirstChild(swigCPtr, IKVPNode.getCPtr(child));
  }

  public void SetNextSibling(IKVPNode sibling) {
    IKVPPINVOKE.KVPNode_SetNextSibling(swigCPtr, IKVPNode.getCPtr(sibling));
  }

  public void AddChild(IKVPNode node) {
    IKVPPINVOKE.KVPNode_AddChild(swigCPtr, IKVPNode.getCPtr(node));
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetFirstChild", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateKVPNode_0(SwigDirectorGetFirstChild);
    if (SwigDerivedClassHasMethod("GetNextSibling", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateKVPNode_1(SwigDirectorGetNextSibling);
    if (SwigDerivedClassHasMethod("GetValue", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateKVPNode_2(SwigDirectorGetValue);
    if (SwigDerivedClassHasMethod("GetParent", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateKVPNode_3(SwigDirectorGetParent);
    IKVPPINVOKE.KVPNode_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(KVPNode));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorGetFirstChild() {
    return IKVPNode.getCPtr(GetFirstChild()).Handle;
  }

  private global::System.IntPtr SwigDirectorGetNextSibling() {
    return IKVPNode.getCPtr(GetNextSibling()).Handle;
  }

  private int SwigDirectorGetValue() {
    return GetValue();
  }

  private global::System.IntPtr SwigDirectorGetParent() {
    return IKVPNode.getCPtr(GetParent()).Handle;
  }

  public delegate global::System.IntPtr SwigDelegateKVPNode_0();
  public delegate global::System.IntPtr SwigDelegateKVPNode_1();
  public delegate int SwigDelegateKVPNode_2();
  public delegate global::System.IntPtr SwigDelegateKVPNode_3();

  private SwigDelegateKVPNode_0 swigDelegate0;
  private SwigDelegateKVPNode_1 swigDelegate1;
  private SwigDelegateKVPNode_2 swigDelegate2;
  private SwigDelegateKVPNode_3 swigDelegate3;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
}
