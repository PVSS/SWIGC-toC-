/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_IKVP(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_IKVP(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_IKVP(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "IKVP_Wrap_CSharp.h"

SwigDirector_IKVPNode::SwigDirector_IKVPNode() : IKVPNode(), Swig::Director() {
  swig_init_callbacks();
}

IKVPNode *SwigDirector_IKVPNode::GetFirstChild() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetFirstChild) {
    throw Swig::DirectorPureVirtualException("IKVPNode::GetFirstChild");
  } else {
    jresult = (void *) swig_callbackGetFirstChild();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPNode *SwigDirector_IKVPNode::GetNextSibling() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetNextSibling) {
    throw Swig::DirectorPureVirtualException("IKVPNode::GetNextSibling");
  } else {
    jresult = (void *) swig_callbackGetNextSibling();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPValueType SwigDirector_IKVPNode::GetValue() const {
  IKVPValueType c_result = SwigValueInit< IKVPValueType >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetValue) {
    throw Swig::DirectorPureVirtualException("IKVPNode::GetValue");
  } else {
    jresult = (int) swig_callbackGetValue();
    c_result = (IKVPValueType)jresult; 
  }
  return c_result;
}

void SwigDirector_IKVPNode::swig_connect_director(SWIG_Callback0_t callbackGetFirstChild, SWIG_Callback1_t callbackGetNextSibling, SWIG_Callback2_t callbackGetValue) {
  swig_callbackGetFirstChild = callbackGetFirstChild;
  swig_callbackGetNextSibling = callbackGetNextSibling;
  swig_callbackGetValue = callbackGetValue;
}

void SwigDirector_IKVPNode::swig_init_callbacks() {
  swig_callbackGetFirstChild = 0;
  swig_callbackGetNextSibling = 0;
  swig_callbackGetValue = 0;
}

SwigDirector_KVPNode::SwigDirector_KVPNode(IKVPNode *parent, IKVPValueType _val) : KVPNode(parent, _val), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_KVPNode::SwigDirector_KVPNode(KVPNode const &other) : KVPNode(other), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_KVPNode::SwigDirector_KVPNode(KVPNode &&other) : KVPNode(other), Swig::Director() {
  swig_init_callbacks();
}

IKVPNode *SwigDirector_KVPNode::GetFirstChild() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetFirstChild) {
    return KVPNode::GetFirstChild();
  } else {
    jresult = (void *) swig_callbackGetFirstChild();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPNode *SwigDirector_KVPNode::GetNextSibling() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetNextSibling) {
    return KVPNode::GetNextSibling();
  } else {
    jresult = (void *) swig_callbackGetNextSibling();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPValueType SwigDirector_KVPNode::GetValue() const {
  IKVPValueType c_result = SwigValueInit< IKVPValueType >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetValue) {
    return KVPNode::GetValue();
  } else {
    jresult = (int) swig_callbackGetValue();
    c_result = (IKVPValueType)jresult; 
  }
  return c_result;
}

IKVPNode *SwigDirector_KVPNode::GetParent() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetParent) {
    return KVPNode::GetParent();
  } else {
    jresult = (void *) swig_callbackGetParent();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

void SwigDirector_KVPNode::swig_connect_director(SWIG_Callback0_t callbackGetFirstChild, SWIG_Callback1_t callbackGetNextSibling, SWIG_Callback2_t callbackGetValue, SWIG_Callback3_t callbackGetParent) {
  swig_callbackGetFirstChild = callbackGetFirstChild;
  swig_callbackGetNextSibling = callbackGetNextSibling;
  swig_callbackGetValue = callbackGetValue;
  swig_callbackGetParent = callbackGetParent;
}

void SwigDirector_KVPNode::swig_init_callbacks() {
  swig_callbackGetFirstChild = 0;
  swig_callbackGetNextSibling = 0;
  swig_callbackGetValue = 0;
  swig_callbackGetParent = 0;
}

SwigDirector_KVPAccessProviderForScanProtocol::SwigDirector_KVPAccessProviderForScanProtocol() : KVPAccessProvider< ScanProtocol >(), Swig::Director() {
  swig_init_callbacks();
}

IKVPNode *SwigDirector_KVPAccessProviderForScanProtocol::GetFirstChild() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetFirstChild) {
    return KVPAccessProvider< ScanProtocol >::GetFirstChild();
  } else {
    jresult = (void *) swig_callbackGetFirstChild();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPNode *SwigDirector_KVPAccessProviderForScanProtocol::GetNextSibling() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetNextSibling) {
    return KVPAccessProvider< ScanProtocol >::GetNextSibling();
  } else {
    jresult = (void *) swig_callbackGetNextSibling();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPValueType SwigDirector_KVPAccessProviderForScanProtocol::GetValue() const {
  IKVPValueType c_result = SwigValueInit< IKVPValueType >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetValue) {
    return KVPAccessProvider< ScanProtocol >::GetValue();
  } else {
    jresult = (int) swig_callbackGetValue();
    c_result = (IKVPValueType)jresult; 
  }
  return c_result;
}

void SwigDirector_KVPAccessProviderForScanProtocol::swig_connect_director(SWIG_Callback0_t callbackGetFirstChild, SWIG_Callback1_t callbackGetNextSibling, SWIG_Callback2_t callbackGetValue) {
  swig_callbackGetFirstChild = callbackGetFirstChild;
  swig_callbackGetNextSibling = callbackGetNextSibling;
  swig_callbackGetValue = callbackGetValue;
}

void SwigDirector_KVPAccessProviderForScanProtocol::swig_init_callbacks() {
  swig_callbackGetFirstChild = 0;
  swig_callbackGetNextSibling = 0;
  swig_callbackGetValue = 0;
}

SwigDirector_ScanProtocol::SwigDirector_ScanProtocol() : ScanProtocol(), Swig::Director() {
  swig_init_callbacks();
}

IKVPNode *SwigDirector_ScanProtocol::GetFirstChild() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetFirstChild) {
    return KVPAccessProvider< ScanProtocol >::GetFirstChild();
  } else {
    jresult = (void *) swig_callbackGetFirstChild();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPNode *SwigDirector_ScanProtocol::GetNextSibling() const {
  IKVPNode *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetNextSibling) {
    return KVPAccessProvider< ScanProtocol >::GetNextSibling();
  } else {
    jresult = (void *) swig_callbackGetNextSibling();
    c_result = (IKVPNode *)jresult; 
  }
  return c_result;
}

IKVPValueType SwigDirector_ScanProtocol::GetValue() const {
  IKVPValueType c_result = SwigValueInit< IKVPValueType >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetValue) {
    return KVPAccessProvider< ScanProtocol >::GetValue();
  } else {
    jresult = (int) swig_callbackGetValue();
    c_result = (IKVPValueType)jresult; 
  }
  return c_result;
}

void SwigDirector_ScanProtocol::swig_connect_director(SWIG_Callback0_t callbackGetFirstChild, SWIG_Callback1_t callbackGetNextSibling, SWIG_Callback2_t callbackGetValue) {
  swig_callbackGetFirstChild = callbackGetFirstChild;
  swig_callbackGetNextSibling = callbackGetNextSibling;
  swig_callbackGetValue = callbackGetValue;
}

void SwigDirector_ScanProtocol::swig_init_callbacks() {
  swig_callbackGetFirstChild = 0;
  swig_callbackGetNextSibling = 0;
  swig_callbackGetValue = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_IKVPNode_GetFirstChild(void * jarg1) {
  void * jresult ;
  IKVPNode *arg1 = (IKVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (IKVPNode *)jarg1; 
  result = (IKVPNode *)((IKVPNode const *)arg1)->GetFirstChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IKVPNode_GetNextSibling(void * jarg1) {
  void * jresult ;
  IKVPNode *arg1 = (IKVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (IKVPNode *)jarg1; 
  result = (IKVPNode *)((IKVPNode const *)arg1)->GetNextSibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IKVPNode_GetValue(void * jarg1) {
  int jresult ;
  IKVPNode *arg1 = (IKVPNode *) 0 ;
  IKVPValueType result;
  
  arg1 = (IKVPNode *)jarg1; 
  result = (IKVPValueType)((IKVPNode const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IKVPNode() {
  void * jresult ;
  IKVPNode *result = 0 ;
  
  result = (IKVPNode *)new SwigDirector_IKVPNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IKVPNode(void * jarg1) {
  IKVPNode *arg1 = (IKVPNode *) 0 ;
  
  arg1 = (IKVPNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IKVPNode_director_connect(void *objarg, SwigDirector_IKVPNode::SWIG_Callback0_t callback0, SwigDirector_IKVPNode::SWIG_Callback1_t callback1, SwigDirector_IKVPNode::SWIG_Callback2_t callback2) {
  IKVPNode *obj = (IKVPNode *)objarg;
  SwigDirector_IKVPNode *director = dynamic_cast<SwigDirector_IKVPNode *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KVPNode__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  IKVPNode *arg1 = (IKVPNode *) 0 ;
  IKVPValueType arg2 ;
  KVPNode *result = 0 ;
  
  arg1 = (IKVPNode *)jarg1; 
  arg2 = (IKVPValueType)jarg2; 
  result = (KVPNode *)new SwigDirector_KVPNode(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KVPNode__SWIG_1(void * jarg1) {
  void * jresult ;
  KVPNode *arg1 = 0 ;
  KVPNode *result = 0 ;
  
  arg1 = (KVPNode *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "KVPNode const & type is null", 0);
    return 0;
  } 
  result = (KVPNode *)new SwigDirector_KVPNode((KVPNode const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KVPNode(void * jarg1) {
  KVPNode *arg1 = (KVPNode *) 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPNode_GetParent(void * jarg1) {
  void * jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPNode *)((KVPNode const *)arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPNode_GetParentSwigExplicitKVPNode(void * jarg1) {
  void * jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPNode *)((KVPNode const *)arg1)->KVPNode::GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPNode_GetFirstChild(void * jarg1) {
  void * jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPNode *)((KVPNode const *)arg1)->GetFirstChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPNode_GetFirstChildSwigExplicitKVPNode(void * jarg1) {
  void * jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPNode *)((KVPNode const *)arg1)->KVPNode::GetFirstChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPNode_GetNextSibling(void * jarg1) {
  void * jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPNode *)((KVPNode const *)arg1)->GetNextSibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPNode_GetNextSiblingSwigExplicitKVPNode(void * jarg1) {
  void * jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPNode *)((KVPNode const *)arg1)->KVPNode::GetNextSibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KVPNode_GetValue(void * jarg1) {
  int jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPValueType result;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPValueType)((KVPNode const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KVPNode_GetValueSwigExplicitKVPNode(void * jarg1) {
  int jresult ;
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPValueType result;
  
  arg1 = (KVPNode *)jarg1; 
  result = (IKVPValueType)((KVPNode const *)arg1)->KVPNode::GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVPNode_SetFirstChild(void * jarg1, void * jarg2) {
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *arg2 = (IKVPNode *) 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  arg2 = (IKVPNode *)jarg2; 
  (arg1)->SetFirstChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVPNode_SetNextSibling(void * jarg1, void * jarg2) {
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *arg2 = (IKVPNode *) 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  arg2 = (IKVPNode *)jarg2; 
  (arg1)->SetNextSibling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVPNode_AddChild(void * jarg1, void * jarg2) {
  KVPNode *arg1 = (KVPNode *) 0 ;
  IKVPNode *arg2 = (IKVPNode *) 0 ;
  
  arg1 = (KVPNode *)jarg1; 
  arg2 = (IKVPNode *)jarg2; 
  (arg1)->AddChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVPNode_director_connect(void *objarg, SwigDirector_KVPNode::SWIG_Callback0_t callback0, SwigDirector_KVPNode::SWIG_Callback1_t callback1, SwigDirector_KVPNode::SWIG_Callback2_t callback2, SwigDirector_KVPNode::SWIG_Callback3_t callback3) {
  KVPNode *obj = (KVPNode *)objarg;
  SwigDirector_KVPNode *director = dynamic_cast<SwigDirector_KVPNode *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KVPAccessProviderForScanProtocol() {
  void * jresult ;
  KVPAccessProvider< ScanProtocol > *result = 0 ;
  
  result = (KVPAccessProvider< ScanProtocol > *)new SwigDirector_KVPAccessProviderForScanProtocol();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_Index(void * jarg1, int jarg2) {
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  int arg2 ;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Index(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_GetFirstChild(void * jarg1) {
  void * jresult ;
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  result = (IKVPNode *)((KVPAccessProvider< ScanProtocol > const *)arg1)->GetFirstChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_GetFirstChildSwigExplicitKVPAccessProviderForScanProtocol(void * jarg1) {
  void * jresult ;
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  result = (IKVPNode *)((KVPAccessProvider< ScanProtocol > const *)arg1)->KVPAccessProvider< ScanProtocol >::GetFirstChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_GetNextSibling(void * jarg1) {
  void * jresult ;
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  result = (IKVPNode *)((KVPAccessProvider< ScanProtocol > const *)arg1)->GetNextSibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_GetNextSiblingSwigExplicitKVPAccessProviderForScanProtocol(void * jarg1) {
  void * jresult ;
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  IKVPNode *result = 0 ;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  result = (IKVPNode *)((KVPAccessProvider< ScanProtocol > const *)arg1)->KVPAccessProvider< ScanProtocol >::GetNextSibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_GetValue(void * jarg1) {
  int jresult ;
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  IKVPValueType result;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  result = (IKVPValueType)((KVPAccessProvider< ScanProtocol > const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_GetValueSwigExplicitKVPAccessProviderForScanProtocol(void * jarg1) {
  int jresult ;
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  IKVPValueType result;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  result = (IKVPValueType)((KVPAccessProvider< ScanProtocol > const *)arg1)->KVPAccessProvider< ScanProtocol >::GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KVPAccessProviderForScanProtocol(void * jarg1) {
  KVPAccessProvider< ScanProtocol > *arg1 = (KVPAccessProvider< ScanProtocol > *) 0 ;
  
  arg1 = (KVPAccessProvider< ScanProtocol > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_director_connect(void *objarg, SwigDirector_KVPAccessProviderForScanProtocol::SWIG_Callback0_t callback0, SwigDirector_KVPAccessProviderForScanProtocol::SWIG_Callback1_t callback1, SwigDirector_KVPAccessProviderForScanProtocol::SWIG_Callback2_t callback2) {
  KVPAccessProvider< ScanProtocol > *obj = (KVPAccessProvider< ScanProtocol > *)objarg;
  SwigDirector_KVPAccessProviderForScanProtocol *director = dynamic_cast<SwigDirector_KVPAccessProviderForScanProtocol *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScanProtocol_GetData(void * jarg1) {
  int jresult ;
  ScanProtocol *arg1 = (ScanProtocol *) 0 ;
  int result;
  
  arg1 = (ScanProtocol *)jarg1; 
  result = (int)(arg1)->GetData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScanProtocol() {
  void * jresult ;
  ScanProtocol *result = 0 ;
  
  result = (ScanProtocol *)new SwigDirector_ScanProtocol();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScanProtocol(void * jarg1) {
  ScanProtocol *arg1 = (ScanProtocol *) 0 ;
  
  arg1 = (ScanProtocol *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScanProtocol_director_connect(void *objarg, SwigDirector_ScanProtocol::SWIG_Callback0_t callback0, SwigDirector_ScanProtocol::SWIG_Callback1_t callback1, SwigDirector_ScanProtocol::SWIG_Callback2_t callback2) {
  ScanProtocol *obj = (ScanProtocol *)objarg;
  SwigDirector_ScanProtocol *director = dynamic_cast<SwigDirector_ScanProtocol *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT IKVPNode * SWIGSTDCALL CSharp_KVPNode_SWIGUpcast(KVPNode *jarg1) {
    return (IKVPNode *)jarg1;
}

SWIGEXPORT IKVPNode * SWIGSTDCALL CSharp_KVPAccessProviderForScanProtocol_SWIGUpcast(KVPAccessProvider< ScanProtocol > *jarg1) {
    return (IKVPNode *)jarg1;
}

SWIGEXPORT KVPAccessProvider< ScanProtocol > * SWIGSTDCALL CSharp_ScanProtocol_SWIGUpcast(ScanProtocol *jarg1) {
    return (KVPAccessProvider< ScanProtocol > *)jarg1;
}

#ifdef __cplusplus
}
#endif

